-- Clear existing questions with bad data and populate with proper questions
DELETE FROM questions WHERE correct_answer = '' OR correct_answer IS NULL;

-- Add proper questions for DSA topic
INSERT INTO questions (id, question_text, options, correct_answer, explanation, difficulty, topic_id) VALUES
(gen_random_uuid(), 'What is the time complexity of binary search?', '["O(n)", "O(log n)", "O(n log n)", "O(n²)"]'::jsonb, 'O(log n)', 'Binary search repeatedly divides the search interval in half, resulting in logarithmic time complexity.', 'intermediate', 'dsa'),
(gen_random_uuid(), 'Which data structure operates on a LIFO (Last In First Out) principle?', '["Queue", "Stack", "Tree", "Graph"]'::jsonb, 'Stack', 'A stack follows the Last In First Out principle where the last element added is the first one to be removed.', 'beginner', 'dsa'),
(gen_random_uuid(), 'What is the worst-case time complexity for quick sort?', '["O(n)", "O(log n)", "O(n log n)", "O(n²)"]'::jsonb, 'O(n²)', 'Quick sort has a worst-case time complexity of O(n²) when the pivot selection is unbalanced.', 'intermediate', 'dsa'),
(gen_random_uuid(), 'Which of the following is not a linear data structure?', '["Array", "Linked List", "Queue", "Tree"]'::jsonb, 'Tree', 'Trees are hierarchical data structures with a root node and child nodes, making them non-linear unlike arrays, linked lists, and queues.', 'beginner', 'dsa'),
(gen_random_uuid(), 'What data structure would you use for implementing a breadth-first search?', '["Stack", "Queue", "Hash Table", "Binary Search Tree"]'::jsonb, 'Queue', 'Breadth-first search uses a queue to keep track of the next vertices to be explored, processing nodes level by level.', 'intermediate', 'dsa'),
(gen_random_uuid(), 'What is the time complexity of inserting an element into a hash table?', '["O(1)", "O(log n)", "O(n)", "O(n²)"]'::jsonb, 'O(1)', 'Hash tables provide constant time O(1) insertion in the average case, though it can be O(n) in the worst case due to collisions.', 'intermediate', 'dsa'),
(gen_random_uuid(), 'Which of the following data structures is most efficient for implementing a priority queue?', '["Array", "Linked List", "Binary Heap", "Hash Table"]'::jsonb, 'Binary Heap', 'Binary heaps provide efficient (O(log n)) operations for insertion and deletion of the highest-priority element, making them ideal for priority queues.', 'intermediate', 'dsa'),
(gen_random_uuid(), 'What is the main disadvantage of using a recursive algorithm compared to an iterative one?', '["Recursive algorithms are always slower", "Recursive algorithms use more memory due to the call stack", "Recursive algorithms cannot solve certain problems", "Recursive algorithms always have higher time complexity"]'::jsonb, 'Recursive algorithms use more memory due to the call stack', 'Recursive algorithms consume more memory due to function call overhead and maintaining the call stack, which can lead to stack overflow for deep recursions.', 'intermediate', 'dsa'),
(gen_random_uuid(), 'Which sorting algorithm has the best average-case time complexity?', '["Bubble Sort", "Insertion Sort", "Quick Sort", "Selection Sort"]'::jsonb, 'Quick Sort', 'Quick Sort has an average-case time complexity of O(n log n), which is better than O(n²) algorithms like Bubble Sort, Insertion Sort, and Selection Sort.', 'intermediate', 'dsa'),
(gen_random_uuid(), 'What is the space complexity of breadth-first search (BFS) on a graph?', '["O(1)", "O(log V)", "O(V)", "O(V + E)"]'::jsonb, 'O(V)', 'BFS uses a queue to store vertices, which in the worst case can contain all vertices of the graph, resulting in O(V) space complexity.', 'advanced', 'dsa'),
(gen_random_uuid(), 'Which of the following is NOT an application of a stack data structure?', '["Function call management", "Expression evaluation", "Breadth-first search", "Undo operation in text editors"]'::jsonb, 'Breadth-first search', 'Breadth-first search uses a queue, not a stack. The other options all use stacks: function calls are managed with a call stack, expression evaluation uses stacks for operators, and undo operations stack previous states.', 'intermediate', 'dsa'),
(gen_random_uuid(), 'What is the worst-case time complexity for finding an element in a balanced binary search tree?', '["O(1)", "O(log n)", "O(n)", "O(n log n)"]'::jsonb, 'O(log n)', 'In a balanced binary search tree, the height is approximately log n, so the worst-case search time is O(log n).', 'beginner', 'dsa'),
(gen_random_uuid(), 'Which of these data structures allows for O(1) access to elements by index?', '["Linked List", "Array", "Binary Search Tree", "Heap"]'::jsonb, 'Array', 'Arrays allow direct access to any element using its index in constant time O(1), unlike linked lists, trees, or heaps which require traversal.', 'beginner', 'dsa'),
(gen_random_uuid(), 'What is dynamic programming primarily used for?', '["Searching algorithms", "Optimization problems with overlapping subproblems", "Memory allocation", "Thread management"]'::jsonb, 'Optimization problems with overlapping subproblems', 'Dynamic programming solves optimization problems by breaking them down into simpler subproblems and storing the results to avoid redundant calculations.', 'advanced', 'dsa'),
(gen_random_uuid(), 'What is the primary advantage of using a doubly linked list over a singly linked list?', '["Less memory usage", "Faster insertion at the beginning", "Bidirectional traversal capability", "Better cache performance"]'::jsonb, 'Bidirectional traversal capability', 'A doubly linked list allows traversal in both forward and backward directions, unlike a singly linked list which only allows forward traversal.', 'beginner', 'dsa');

-- Add proper questions for DBMS topic
INSERT INTO questions (id, question_text, options, correct_answer, explanation, difficulty, topic_id) VALUES
(gen_random_uuid(), 'What does ACID stand for in database transactions?', '["Atomicity, Consistency, Isolation, Durability", "Association, Completion, Isolation, Definition", "Atomicity, Completion, Integrity, Durability", "Association, Consistency, Integrity, Definition"]'::jsonb, 'Atomicity, Consistency, Isolation, Durability', 'ACID properties ensure reliable processing of database transactions.', 'intermediate', 'dbms'),
(gen_random_uuid(), 'Which normal form eliminates transitive dependencies?', '["1NF", "2NF", "3NF", "BCNF"]'::jsonb, '3NF', 'Third Normal Form (3NF) eliminates transitive dependencies, where non-key attributes depend on other non-key attributes.', 'advanced', 'dbms'),
(gen_random_uuid(), 'What SQL command would you use to retrieve data from a database?', '["INSERT", "UPDATE", "SELECT", "DELETE"]'::jsonb, 'SELECT', 'The SELECT statement is used to query and retrieve data from database tables.', 'beginner', 'dbms'),
(gen_random_uuid(), 'What is the difference between a primary key and a unique key?', '["A primary key cannot be null, while a unique key can be null", "A primary key automatically creates an index, while a unique key does not", "A table can have multiple primary keys, but only one unique key", "A primary key must be a single column, while a unique key can span multiple columns"]'::jsonb, 'A primary key cannot be null, while a unique key can be null', 'The main difference is that a primary key cannot contain NULL values, while a unique key can. Also, a table can have only one primary key but multiple unique keys.', 'intermediate', 'dbms'),
(gen_random_uuid(), 'Which normal form eliminates partial dependencies?', '["1NF", "2NF", "3NF", "BCNF"]'::jsonb, '2NF', 'Second Normal Form (2NF) eliminates partial dependencies, where a non-key attribute depends on only part of a composite key.', 'intermediate', 'dbms'),
(gen_random_uuid(), 'What is a deadlock in database transactions?', '["When a transaction is waiting for a resource that will never be available", "When two or more transactions are waiting for each other to release locks, and neither can proceed", "When a transaction is terminated unexpectedly", "When a database server crashes during a transaction"]'::jsonb, 'When two or more transactions are waiting for each other to release locks, and neither can proceed', 'A deadlock occurs when transactions are unable to proceed because each is waiting for resources held by another transaction in the deadlock set.', 'advanced', 'dbms'),
(gen_random_uuid(), 'What is the purpose of indexing in databases?', '["To ensure data integrity", "To speed up data retrieval operations", "To normalize the database", "To backup data automatically"]'::jsonb, 'To speed up data retrieval operations', 'Database indexes are data structures that improve the speed of data retrieval operations on a database table at the cost of additional writes and storage space.', 'intermediate', 'dbms'),
(gen_random_uuid(), 'Which SQL JOIN returns all rows from both tables?', '["INNER JOIN", "LEFT JOIN", "RIGHT JOIN", "FULL OUTER JOIN"]'::jsonb, 'FULL OUTER JOIN', 'FULL OUTER JOIN returns all rows from both tables, matching records where possible and filling unmatched records with NULL values.', 'intermediate', 'dbms'),
(gen_random_uuid(), 'What is normalization in database design?', '["A process to remove data redundancy and improve data integrity", "A method to encrypt sensitive data", "A technique to improve query performance", "A way to backup database regularly"]'::jsonb, 'A process to remove data redundancy and improve data integrity', 'Database normalization is the process of organizing data to reduce redundancy and improve data integrity by dividing large tables into smaller, related tables.', 'beginner', 'dbms'),
(gen_random_uuid(), 'Which of the following is NOT a type of database constraint?', '["PRIMARY KEY", "FOREIGN KEY", "UNIQUE", "AGGREGATE"]'::jsonb, 'AGGREGATE', 'AGGREGATE is not a database constraint. PRIMARY KEY, FOREIGN KEY, and UNIQUE are all types of constraints used to enforce data integrity.', 'beginner', 'dbms');

-- Add proper questions for OS topic
INSERT INTO questions (id, question_text, options, correct_answer, explanation, difficulty, topic_id) VALUES
(gen_random_uuid(), 'What is the main function of an operating system?', '["To compile programs", "To manage computer hardware and software resources", "To create websites", "To design user interfaces"]'::jsonb, 'To manage computer hardware and software resources', 'An operating system acts as an intermediary between users and computer hardware, managing resources and providing services.', 'beginner', 'os'),
(gen_random_uuid(), 'What is the difference between a process and a thread?', '["Processes share memory space, threads do not", "Threads are more resource-intensive than processes", "Processes have separate memory spaces, threads share memory space within a process", "Threads cannot communicate with each other, processes can"]'::jsonb, 'Processes have separate memory spaces, threads share memory space within a process', 'Processes have their own memory spaces and resources, while threads within the same process share the process memory space and resources.', 'intermediate', 'os'),
(gen_random_uuid(), 'Which of the following is NOT a process state?', '["Ready", "Running", "Waiting", "Executing"]'::jsonb, 'Executing', 'The standard process states are Ready, Running, and Waiting (or Blocked). "Executing" is generally not used as a formal process state.', 'beginner', 'os'),
(gen_random_uuid(), 'What is virtual memory?', '["Physical RAM installed in the computer", "A technique that uses disk space to extend apparent memory", "Cache memory in the CPU", "Memory used by virtual machines"]'::jsonb, 'A technique that uses disk space to extend apparent memory', 'Virtual memory is a memory management technique that uses disk space to simulate additional RAM, allowing programs to use more memory than physically available.', 'intermediate', 'os'),
(gen_random_uuid(), 'Which scheduling algorithm gives priority to the process with the shortest execution time?', '["FIFO", "Round Robin", "Shortest Job First", "Priority Scheduling"]'::jsonb, 'Shortest Job First', 'SJF (Shortest Job First) scheduling algorithm selects the process with the smallest execution time for scheduling, minimizing average waiting time.', 'intermediate', 'os'),
(gen_random_uuid(), 'What is a deadlock in operating systems?', '["When the system runs out of memory", "When two or more processes are unable to proceed because each is waiting for the other to release resources", "When the CPU overheats", "When a process crashes"]'::jsonb, 'When two or more processes are unable to proceed because each is waiting for the other to release resources', 'A deadlock occurs when two or more processes are blocked forever, waiting for each other to release resources they need.', 'advanced', 'os'),
(gen_random_uuid(), 'What is the purpose of a file system?', '["To manage network connections", "To organize and store files on storage devices", "To schedule processes", "To manage memory allocation"]'::jsonb, 'To organize and store files on storage devices', 'A file system provides a way to organize, store, and retrieve files on storage devices like hard drives, SSDs, and other media.', 'beginner', 'os'),
(gen_random_uuid(), 'Which of the following is a type of system call?', '["Process control", "File management", "Device management", "All of the above"]'::jsonb, 'All of the above', 'System calls are categorized into several types including process control, file management, device management, information maintenance, and communication.', 'intermediate', 'os'),
(gen_random_uuid(), 'What is thrashing in operating systems?', '["When the CPU utilization is very high", "When the system spends more time swapping pages than executing processes", "When multiple processes run simultaneously", "When the system memory is fully utilized"]'::jsonb, 'When the system spends more time swapping pages than executing processes', 'Thrashing occurs when the system spends excessive time moving pages between memory and disk, resulting in poor performance.', 'advanced', 'os'),
(gen_random_uuid(), 'What is the role of the kernel in an operating system?', '["To provide user interface", "To run application programs", "To manage system resources and provide core services", "To compile source code"]'::jsonb, 'To manage system resources and provide core services', 'The kernel is the core component of an operating system that manages system resources, provides essential services, and acts as a bridge between applications and hardware.', 'intermediate', 'os');

-- Add proper questions for OOPS topic
INSERT INTO questions (id, question_text, options, correct_answer, explanation, difficulty, topic_id) VALUES
(gen_random_uuid(), 'What is encapsulation in object-oriented programming?', '["The ability to inherit properties from other classes", "The process of hiding internal implementation details and exposing only necessary methods", "The ability to take multiple forms", "The process of creating objects from classes"]'::jsonb, 'The process of hiding internal implementation details and exposing only necessary methods', 'Encapsulation is the bundling of data and methods that work on that data within one unit, and restricting access to internal implementation details.', 'beginner', 'oops'),
(gen_random_uuid(), 'Which of the following best describes polymorphism?', '["One interface, multiple implementations", "Creating new classes from existing classes", "Hiding implementation details", "Organizing code into objects"]'::jsonb, 'One interface, multiple implementations', 'Polymorphism allows objects of different classes to be treated as objects of a common base class, enabling one interface to work with multiple implementations.', 'intermediate', 'oops'),
(gen_random_uuid(), 'What is inheritance in OOP?', '["The ability to create multiple objects from one class", "The mechanism by which one class acquires properties and methods of another class", "The process of hiding data from external access", "The ability to override method implementations"]'::jsonb, 'The mechanism by which one class acquires properties and methods of another class', 'Inheritance allows a class (subclass) to inherit properties and methods from another class (superclass), promoting code reusability.', 'beginner', 'oops'),
(gen_random_uuid(), 'What is method overriding?', '["Defining multiple methods with the same name but different parameters", "Redefining a parent class method in a child class", "Creating multiple constructors in a class", "Hiding methods from external access"]'::jsonb, 'Redefining a parent class method in a child class', 'Method overriding occurs when a subclass provides a specific implementation of a method that is already defined in its parent class.', 'intermediate', 'oops'),
(gen_random_uuid(), 'What is the difference between method overloading and method overriding?', '["Overloading occurs at runtime, overriding at compile time", "Overloading uses same method name with different parameters, overriding redefines inherited methods", "Overloading is for static methods, overriding for instance methods", "There is no difference"]'::jsonb, 'Overloading uses same method name with different parameters, overriding redefines inherited methods', 'Method overloading allows multiple methods with the same name but different parameters in the same class, while overriding redefines a parent class method in a child class.', 'intermediate', 'oops'),
(gen_random_uuid(), 'What is abstraction in OOP?', '["The process of creating objects from classes", "Hiding complex implementation details and showing only essential features", "The ability to inherit from multiple classes", "The process of organizing related classes together"]'::jsonb, 'Hiding complex implementation details and showing only essential features', 'Abstraction is the concept of hiding the complex implementation details and showing only the essential features of an object to the user.', 'beginner', 'oops'),
(gen_random_uuid(), 'What is a constructor in OOP?', '["A method that destroys objects", "A special method used to initialize objects when they are created", "A method that copies objects", "A method that compares objects"]'::jsonb, 'A special method used to initialize objects when they are created', 'A constructor is a special method that is automatically called when an object is created, used to initialize the object state.', 'beginner', 'oops'),
(gen_random_uuid(), 'Which principle of OOP helps in code reusability?', '["Encapsulation", "Inheritance", "Polymorphism", "Abstraction"]'::jsonb, 'Inheritance', 'Inheritance is the primary OOP principle that promotes code reusability by allowing classes to inherit properties and methods from other classes.', 'beginner', 'oops'),
(gen_random_uuid(), 'What is composition in OOP?', '["A type of inheritance", "A design principle where a class contains objects of other classes as members", "A method to hide data", "A way to create multiple objects"]'::jsonb, 'A design principle where a class contains objects of other classes as members', 'Composition is a design principle where a class is composed of one or more objects of other classes, representing a "has-a" relationship.', 'intermediate', 'oops'),
(gen_random_uuid(), 'What is the purpose of access modifiers in OOP?', '["To control the visibility and accessibility of class members", "To define method parameters", "To specify return types", "To create multiple classes"]'::jsonb, 'To control the visibility and accessibility of class members', 'Access modifiers (public, private, protected) control the visibility and accessibility of class members, supporting encapsulation and data hiding.', 'beginner', 'oops');